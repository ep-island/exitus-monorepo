/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as ElectionStakeContractJson } from "../ElectionStake.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace ElectionStakeTypes {
  export type Fields = {
    name: HexString;
    platformFeePercent: bigint;
    forCandidateA: bigint;
    forCandidateB: bigint;
    candidateAStaked: bigint;
    candidateBStaked: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    placeBet: {
      params: CallContractParams<{ candidate: boolean; amount: bigint }>;
      result: CallContractResult<null>;
    };
    getCurrentStakes: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[bigint, bigint, bigint, bigint]>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getName: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    placeBet: {
      params: SignExecuteContractMethodParams<{
        candidate: boolean;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getCurrentStakes: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  ElectionStakeInstance,
  ElectionStakeTypes.Fields
> {
  encodeFields(fields: ElectionStakeTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  at(address: string): ElectionStakeInstance {
    return new ElectionStakeInstance(address);
  }

  tests = {
    getName: async (
      params: Omit<
        TestContractParamsWithoutMaps<ElectionStakeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getName", params, getContractByCodeHash);
    },
    placeBet: async (
      params: TestContractParamsWithoutMaps<
        ElectionStakeTypes.Fields,
        { candidate: boolean; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "placeBet", params, getContractByCodeHash);
    },
    getCurrentStakes: async (
      params: Omit<
        TestContractParamsWithoutMaps<ElectionStakeTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<
      TestContractResultWithoutMaps<[bigint, bigint, bigint, bigint]>
    > => {
      return testMethod(
        this,
        "getCurrentStakes",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: ElectionStakeTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const ElectionStake = new Factory(
  Contract.fromJson(
    ElectionStakeContractJson,
    "=8-2+7e=2-2+92=38-2+4023=10+7e010e6265666f72652070662066656573ce017e0208706620666565732000=28+16027e020f616674657220706620666565733a2000=108",
    "eba9c4cbe8a80c7c44993f2def51138c6a014e657d81c90a251b4eccf67b429a",
    []
  )
);
registerContract(ElectionStake);

// Use this class to interact with the blockchain
export class ElectionStakeInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<ElectionStakeTypes.State> {
    return fetchContractState(ElectionStake, this);
  }

  view = {
    getName: async (
      params?: ElectionStakeTypes.CallMethodParams<"getName">
    ): Promise<ElectionStakeTypes.CallMethodResult<"getName">> => {
      return callMethod(
        ElectionStake,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    placeBet: async (
      params: ElectionStakeTypes.CallMethodParams<"placeBet">
    ): Promise<ElectionStakeTypes.CallMethodResult<"placeBet">> => {
      return callMethod(
        ElectionStake,
        this,
        "placeBet",
        params,
        getContractByCodeHash
      );
    },
    getCurrentStakes: async (
      params?: ElectionStakeTypes.CallMethodParams<"getCurrentStakes">
    ): Promise<ElectionStakeTypes.CallMethodResult<"getCurrentStakes">> => {
      return callMethod(
        ElectionStake,
        this,
        "getCurrentStakes",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getName: async (
      params: ElectionStakeTypes.SignExecuteMethodParams<"getName">
    ): Promise<ElectionStakeTypes.SignExecuteMethodResult<"getName">> => {
      return signExecuteMethod(ElectionStake, this, "getName", params);
    },
    placeBet: async (
      params: ElectionStakeTypes.SignExecuteMethodParams<"placeBet">
    ): Promise<ElectionStakeTypes.SignExecuteMethodResult<"placeBet">> => {
      return signExecuteMethod(ElectionStake, this, "placeBet", params);
    },
    getCurrentStakes: async (
      params: ElectionStakeTypes.SignExecuteMethodParams<"getCurrentStakes">
    ): Promise<
      ElectionStakeTypes.SignExecuteMethodResult<"getCurrentStakes">
    > => {
      return signExecuteMethod(ElectionStake, this, "getCurrentStakes", params);
    },
  };

  async multicall<Calls extends ElectionStakeTypes.MultiCallParams>(
    calls: Calls
  ): Promise<ElectionStakeTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends ElectionStakeTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<ElectionStakeTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | ElectionStakeTypes.MultiCallParams
      | ElectionStakeTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      ElectionStake,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
